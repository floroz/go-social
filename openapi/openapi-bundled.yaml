openapi: 3.0.3
info:
  title: Go Social API
  version: 1.0.0
  description: API specification for the Go Social application.
servers:
  - url: /api
    description: Development server
tags:
  - name: Authentication V1
    description: Operations related to user authentication (Version 1)
  - name: Users V1
    description: Operations related to users (Version 1)
  - name: Posts V1
    description: Operations related to posts (Version 1)
  - name: Comments V1
    description: Operations related to comments (Version 1)
paths:
  /v1/auth/signup:
    post:
      tags:
        - Authentication V1
      summary: Sign up a new user
      description: Creates a new user account.
      operationId: signupUserV1
      requestBody:
        description: User signup details.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/SignupRequest'
              required:
                - data
      responses:
        '201':
          description: User successfully registered. Returns the created user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '409':
          description: Username or email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error during registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/auth/login:
    post:
      tags:
        - Authentication V1
      summary: Log in a user
      description: Authenticates a user and returns a JWT.
      operationId: loginUserV1
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/LoginRequest'
              required:
                - data
      responses:
        '200':
          description: Login successful. Returns a JWT token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error during login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/auth/logout:
    post:
      tags:
        - Authentication V1
      summary: Log out a user
      description: Clears authentication cookies.
      operationId: logoutUserV1
      responses:
        '200':
          description: Logout successful. No content returned.
        '500':
          description: Server error during logout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/auth/refresh:
    post:
      tags:
        - Authentication V1
      summary: Refresh access token
      description: Uses the refresh token (from cookie) to issue a new access token (in cookie).
      operationId: refreshAccessTokenV1
      responses:
        '200':
          description: Access token refreshed successfully. No content returned in body. New access_token cookie set.
        '401':
          description: Invalid or missing refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error during token refresh.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/users:
    get:
      tags:
        - Users V1
      summary: Get current user profile
      description: Retrieves the profile information for the currently authenticated user.
      operationId: getUserProfileV1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserProfileSuccessResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: User not found (should not typically happen if authenticated).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error retrieving profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
        - Users V1
      summary: Update current user profile
      description: Updates the profile information for the currently authenticated user.
      operationId: updateUserProfileV1
      security:
        - bearerAuth: []
      requestBody:
        description: User profile fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully. Returns the updated user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserProfileSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error updating profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/posts:
    get:
      tags:
        - Posts V1
      summary: List posts
      description: Retrieves a list of posts, potentially with pagination.
      operationId: listPostsV1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of posts retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostsSuccessResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error retrieving posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    post:
      tags:
        - Posts V1
      summary: Create a new post
      description: Creates a new post for the authenticated user.
      operationId: createPostV1
      security:
        - bearerAuth: []
      requestBody:
        description: Post content.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully. Returns the created post object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error creating post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the post to operate on.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Posts V1
      summary: Get a specific post by ID
      description: Retrieves details of a specific post.
      operationId: getPostByIdV1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Post retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostSuccessResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error retrieving post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
        - Posts V1
      summary: Update a specific post by ID
      description: Updates the content of a specific post owned by the authenticated user.
      operationId: updatePostV1
      security:
        - bearerAuth: []
      requestBody:
        description: Updated post content.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully. Returns the updated post object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePostSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '403':
          description: User is not authorized to update this post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error updating post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
        - Posts V1
      summary: Delete a specific post by ID
      description: Deletes a specific post owned by the authenticated user.
      operationId: deletePostV1
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Post deleted successfully. No content returned.
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '403':
          description: User is not authorized to delete this post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error deleting post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/posts/{postId}/comments:
    parameters:
      - name: postId
        in: path
        required: true
        description: The ID of the post to retrieve comments for or add a comment to.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Comments V1
      summary: List comments for a post
      description: Retrieves a list of comments for a specific post.
      operationId: listCommentsForPostV1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of comments retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentsSuccessResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error retrieving comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    post:
      tags:
        - Comments V1
      summary: Create a new comment on a post
      description: Creates a new comment on a specific post for the authenticated user.
      operationId: createCommentV1
      security:
        - bearerAuth: []
      requestBody:
        description: Comment content.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully. Returns the created comment object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error creating comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v1/posts/{postId}/comments/{id}:
    parameters:
      - name: postId
        in: path
        required: true
        description: The ID of the post the comment belongs to.
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        required: true
        description: The ID of the comment to operate on.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Comments V1
      summary: Get a specific comment by ID
      description: Retrieves details of a specific comment.
      operationId: getCommentByIdV1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Comment retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentSuccessResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post or Comment with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error retrieving comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
        - Comments V1
      summary: Update a specific comment by ID
      description: Updates the content of a specific comment owned by the authenticated user.
      operationId: updateCommentV1
      security:
        - bearerAuth: []
      requestBody:
        description: Updated comment content.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comment updated successfully. Returns the updated comment object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentSuccessResponse'
        '400':
          description: Invalid input data (e.g., validation errors).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '403':
          description: User is not authorized to update this comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post or Comment with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error updating comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
        - Comments V1
      summary: Delete a specific comment by ID
      description: Deletes a specific comment owned by the authenticated user.
      operationId: deleteCommentV1
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Comment deleted successfully. No content returned.
        '401':
          description: Authentication required or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '403':
          description: User is not authorized to delete this comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Post or Comment with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Server error deleting comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
components:
  schemas:
    ApiErrorResponse:
      type: object
      properties:
        errors:
          type: array
          description: An array containing one or more error objects.
          items:
            $ref: '#/components/schemas/ApiError'
      required:
        - errors
    User:
      type: object
      description: Represents a user in the system.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user.
          readOnly: true
          example: 101
        first_name:
          type: string
          description: User's first name.
          example: John
        last_name:
          type: string
          description: User's last name.
          example: Doe
        username:
          type: string
          description: User's unique username.
          example: johndoe
        email:
          type: string
          format: email
          description: User's email address.
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          readOnly: true
          example: '2024-01-15T10:30:00Z'
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated.
          readOnly: true
          example: '2024-01-16T12:45:00Z'
        last_login:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the user's last login.
          readOnly: true
          example: '2024-01-17T09:00:00Z'
      required:
        - id
        - first_name
        - last_name
        - username
        - email
        - created_at
        - updated_at
    SignupRequest:
      type: object
      description: Data required for user signup.
      properties:
        first_name:
          type: string
          minLength: 3
          maxLength: 50
          description: User's first name.
          example: Jane
        last_name:
          type: string
          minLength: 3
          maxLength: 50
          description: User's last name.
          example: Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9]+$
          description: Desired username (alphanumeric).
          example: janedoe
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 50
          description: User's email address.
          example: jane.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 50
          description: Desired password.
          example: s3cr3tp@ssw0rd
      required:
        - first_name
        - last_name
        - username
        - email
        - password
    LoginRequest:
      type: object
      description: Data required for user login.
      properties:
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 50
          description: User's email address.
          example: jane.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 50
          description: User's password.
          example: s3cr3tp@ssw0rd
      required:
        - email
        - password
    LoginResponse:
      type: object
      description: Response containing the JWT upon successful login.
      properties:
        token:
          type: string
          format: jwt
          description: JSON Web Token for authenticated sessions.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - token
    UpdateUserProfileRequest:
      type: object
      description: Fields allowed for updating a user profile.
      properties:
        first_name:
          type: string
          minLength: 3
          maxLength: 50
          description: User's first name.
          example: Jane
        last_name:
          type: string
          minLength: 3
          maxLength: 50
          description: User's last name.
          example: Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9]+$
          description: Desired username (alphanumeric).
          example: janedoe
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 50
          description: User's email address.
          example: jane.doe@example.com
    GetUserProfileSuccessResponse:
      type: object
      description: Standard wrapper for the successful user profile retrieval response.
      properties:
        data:
          description: Contains the user profile object.
          $ref: '#/components/schemas/User'
      required:
        - data
    UpdateUserProfileSuccessResponse:
      type: object
      description: Standard wrapper for the successful user profile update response.
      properties:
        data:
          description: Contains the updated user profile object.
          $ref: '#/components/schemas/User'
      required:
        - data
    Post:
      type: object
      description: Represents a post in the system.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the post.
          readOnly: true
        user_id:
          type: integer
          format: int64
          description: ID of the user who created the post.
          readOnly: true
        content:
          type: string
          description: The text content of the post.
          example: This is my first post!
        created_at:
          type: string
          format: date-time
          description: Timestamp when the post was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the post was last updated.
          readOnly: true
      required:
        - id
        - user_id
        - content
        - created_at
        - updated_at
    CreatePostRequest:
      type: object
      description: Data required to create a new post.
      properties:
        content:
          type: string
          description: The text content of the post.
          example: Just setting up my Go-Social account!
          minLength: 1
          maxLength: 1000
      required:
        - content
    UpdatePostRequest:
      type: object
      description: Data required to update an existing post.
      properties:
        content:
          type: string
          description: The updated text content of the post.
          example: Updated my first post!
          minLength: 1
          maxLength: 1000
      required:
        - content
    CreatePostSuccessResponse:
      type: object
      description: Standard wrapper for the successful post creation response.
      properties:
        data:
          description: Contains the created post object.
          $ref: '#/components/schemas/Post'
      required:
        - data
    GetPostSuccessResponse:
      type: object
      description: Standard wrapper for the successful post retrieval response.
      properties:
        data:
          description: Contains the retrieved post object.
          $ref: '#/components/schemas/Post'
      required:
        - data
    UpdatePostSuccessResponse:
      type: object
      description: Standard wrapper for the successful post update response.
      properties:
        data:
          description: Contains the updated post object.
          $ref: '#/components/schemas/Post'
      required:
        - data
    ListPostsSuccessResponse:
      type: object
      description: Standard wrapper for the successful post list retrieval response.
      properties:
        data:
          type: array
          description: An array of post objects.
          items:
            $ref: '#/components/schemas/Post'
      required:
        - data
    Comment:
      type: object
      description: Represents a comment on a post.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the comment.
          readOnly: true
        post_id:
          type: integer
          format: int64
          description: ID of the post this comment belongs to.
          readOnly: true
        user_id:
          type: integer
          format: int64
          description: ID of the user who created the comment.
          readOnly: true
        content:
          type: string
          description: The text content of the comment.
          example: Great post!
        created_at:
          type: string
          format: date-time
          description: Timestamp when the comment was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the comment was last updated.
          readOnly: true
      required:
        - id
        - post_id
        - user_id
        - content
        - created_at
        - updated_at
    CreateCommentRequest:
      type: object
      description: Data required to create a new comment on a post.
      properties:
        content:
          type: string
          description: The text content of the comment.
          example: I agree!
          minLength: 1
          maxLength: 500
      required:
        - content
    UpdateCommentRequest:
      type: object
      description: Data required to update an existing comment.
      properties:
        content:
          type: string
          description: The updated text content of the comment.
          example: I strongly agree!
          minLength: 1
          maxLength: 500
      required:
        - content
    CreateCommentSuccessResponse:
      type: object
      description: Standard wrapper for the successful comment creation response.
      properties:
        data:
          description: Contains the created comment object.
          $ref: '#/components/schemas/Comment'
      required:
        - data
    GetCommentSuccessResponse:
      type: object
      description: Standard wrapper for the successful comment retrieval response.
      properties:
        data:
          description: Contains the retrieved comment object.
          $ref: '#/components/schemas/Comment'
      required:
        - data
    UpdateCommentSuccessResponse:
      type: object
      description: Standard wrapper for the successful comment update response.
      properties:
        data:
          description: Contains the updated comment object.
          $ref: '#/components/schemas/Comment'
      required:
        - data
    ListCommentsSuccessResponse:
      type: object
      description: Standard wrapper for the successful comment list retrieval response.
      properties:
        data:
          type: array
          description: An array of comment objects.
          items:
            $ref: '#/components/schemas/Comment'
      required:
        - data
    SignupSuccessResponse:
      type: object
      description: Standard wrapper for the successful signup response.
      properties:
        data:
          description: Contains the created user object.
          $ref: '#/components/schemas/User'
      required:
        - data
    ApiError:
      type: object
      properties:
        code:
          type: string
          description: An application-specific error code.
          example: VALIDATION_ERROR
        message:
          type: string
          description: A human-readable description of the error.
          example: Email format is invalid.
        field:
          type: string
          description: The specific input field related to the error (optional).
          example: email
      required:
        - code
        - message
    LoginSuccessResponse:
      type: object
      description: Standard wrapper for the successful login response.
      properties:
        data:
          description: Contains the login response object (e.g., JWT token).
          $ref: '#/components/schemas/LoginResponse'
      required:
        - data
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
