// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Optional additional details or validation errors.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A human-readable error message.
	Error string `json:"error"`
}

// LoginRequest Data required for user login.
type LoginRequest struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// Password User's password.
	Password string `json:"password"`
}

// LoginResponse Response containing the JWT upon successful login.
type LoginResponse struct {
	// Token JSON Web Token for authenticated sessions.
	Token string `json:"token"`
}

// SignupRequest Data required for user signup.
type SignupRequest struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name.
	FirstName string `json:"first_name"`

	// LastName User's last name.
	LastName string `json:"last_name"`

	// Password Desired password.
	Password string `json:"password"`

	// Username Desired username (alphanumeric).
	Username string `json:"username"`
}

// User Represents a user in the system.
type User struct {
	// CreatedAt Timestamp when the user was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name.
	FirstName string `json:"first_name"`

	// Id Unique identifier for the user.
	Id *int64 `json:"id,omitempty"`

	// LastLogin Timestamp of the user's last login.
	LastLogin *time.Time `json:"last_login"`

	// LastName User's last name.
	LastName string `json:"last_name"`

	// UpdatedAt Timestamp when the user was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Username User's unique username.
	Username string `json:"username"`
}

// LoginUserV1JSONRequestBody defines body for LoginUserV1 for application/json ContentType.
type LoginUserV1JSONRequestBody = LoginRequest

// SignupUserV1JSONRequestBody defines body for SignupUserV1 for application/json ContentType.
type SignupUserV1JSONRequestBody = SignupRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginUserV1WithBody request with any body
	LoginUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginUserV1(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignupUserV1WithBody request with any body
	SignupUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignupUserV1(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUserV1(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupUserV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupUserV1(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupUserV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginUserV1Request calls the generic LoginUserV1 builder with application/json body
func NewLoginUserV1Request(server string, body LoginUserV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginUserV1RequestWithBody(server, "application/json", bodyReader)
}

// NewLoginUserV1RequestWithBody generates requests for LoginUserV1 with any type of body
func NewLoginUserV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSignupUserV1Request calls the generic SignupUserV1 builder with application/json body
func NewSignupUserV1Request(server string, body SignupUserV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignupUserV1RequestWithBody(server, "application/json", bodyReader)
}

// NewSignupUserV1RequestWithBody generates requests for SignupUserV1 with any type of body
func NewSignupUserV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginUserV1WithBodyWithResponse request with any body
	LoginUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error)

	LoginUserV1WithResponse(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error)

	// SignupUserV1WithBodyWithResponse request with any body
	SignupUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error)

	SignupUserV1WithResponse(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error)
}

type LoginUserV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LoginUserV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignupUserV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SignupUserV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignupUserV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginUserV1WithBodyWithResponse request with arbitrary body returning *LoginUserV1Response
func (c *ClientWithResponses) LoginUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error) {
	rsp, err := c.LoginUserV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserV1Response(rsp)
}

func (c *ClientWithResponses) LoginUserV1WithResponse(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error) {
	rsp, err := c.LoginUserV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserV1Response(rsp)
}

// SignupUserV1WithBodyWithResponse request with arbitrary body returning *SignupUserV1Response
func (c *ClientWithResponses) SignupUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error) {
	rsp, err := c.SignupUserV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupUserV1Response(rsp)
}

func (c *ClientWithResponses) SignupUserV1WithResponse(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error) {
	rsp, err := c.SignupUserV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupUserV1Response(rsp)
}

// ParseLoginUserV1Response parses an HTTP response from a LoginUserV1WithResponse call
func ParseLoginUserV1Response(rsp *http.Response) (*LoginUserV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSignupUserV1Response parses an HTTP response from a SignupUserV1WithResponse call
func ParseSignupUserV1Response(rsp *http.Response) (*SignupUserV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignupUserV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /v1/auth/login)
	LoginUserV1(ctx echo.Context) error
	// Sign up a new user
	// (POST /v1/auth/signup)
	SignupUserV1(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUserV1 converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUserV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUserV1(ctx)
	return err
}

// SignupUserV1 converts echo context to params.
func (w *ServerInterfaceWrapper) SignupUserV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupUserV1(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/auth/login", wrapper.LoginUserV1)
	router.POST(baseURL+"/v1/auth/signup", wrapper.SignupUserV1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
