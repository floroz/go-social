// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiError defines model for ApiError.
type ApiError struct {
	// Code An application-specific error code.
	Code string `json:"code"`

	// Field The specific input field related to the error (optional).
	Field *string `json:"field,omitempty"`

	// Message A human-readable description of the error.
	Message string `json:"message"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	// Errors An array containing one or more error objects.
	Errors []ApiError `json:"errors"`
}

// Comment Represents a comment on a post.
type Comment struct {
	// Content The text content of the comment.
	Content string `json:"content"`

	// CreatedAt Timestamp when the comment was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the comment.
	Id *int64 `json:"id,omitempty"`

	// PostId ID of the post this comment belongs to.
	PostId *int64 `json:"post_id,omitempty"`

	// UpdatedAt Timestamp when the comment was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of the user who created the comment.
	UserId *int64 `json:"user_id,omitempty"`
}

// CreateCommentRequest Data required to create a new comment on a post.
type CreateCommentRequest struct {
	// Content The text content of the comment.
	Content string `json:"content"`
}

// CreateCommentSuccessResponse Standard wrapper for the successful comment creation response.
type CreateCommentSuccessResponse struct {
	// Data Represents a comment on a post.
	Data Comment `json:"data"`
}

// CreateLikeSuccessResponse Standard wrapper for the successful like creation response.
type CreateLikeSuccessResponse struct {
	// Data Represents a user's like on a post or comment. One of post_id or comment_id should be populated.
	Data Like `json:"data"`
}

// CreatePostRequest Data required to create a new post.
type CreatePostRequest struct {
	// Content The text content of the post.
	Content string `json:"content"`
}

// CreatePostSuccessResponse Standard wrapper for the successful post creation response.
type CreatePostSuccessResponse struct {
	// Data Represents a post in the system.
	Data Post `json:"data"`
}

// GetCommentSuccessResponse Standard wrapper for the successful comment retrieval response.
type GetCommentSuccessResponse struct {
	// Data Represents a comment on a post.
	Data Comment `json:"data"`
}

// GetPostSuccessResponse Standard wrapper for the successful post retrieval response.
type GetPostSuccessResponse struct {
	// Data Represents a post in the system.
	Data Post `json:"data"`
}

// GetUserProfileSuccessResponse Standard wrapper for the successful user profile retrieval response.
type GetUserProfileSuccessResponse struct {
	// Data Represents a user in the system.
	Data User `json:"data"`
}

// Like Represents a user's like on a post or comment. One of post_id or comment_id should be populated.
type Like struct {
	// CommentId ID of the comment being liked (mutually exclusive with post_id).
	CommentId *int64 `json:"comment_id"`

	// CreatedAt Timestamp when the like was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the like.
	Id *int64 `json:"id,omitempty"`

	// PostId ID of the post being liked (mutually exclusive with comment_id).
	PostId *int64 `json:"post_id"`

	// UserId ID of the user who liked the content.
	UserId *int64 `json:"user_id,omitempty"`
}

// ListCommentsSuccessResponse Standard wrapper for the successful comment list retrieval response.
type ListCommentsSuccessResponse struct {
	// Data An array of comment objects.
	Data []Comment `json:"data"`
}

// ListLikesSuccessResponse Standard wrapper for listing likes.
type ListLikesSuccessResponse struct {
	Data []Like `json:"data"`
}

// ListPostsSuccessResponse Standard wrapper for the successful post list retrieval response.
type ListPostsSuccessResponse struct {
	// Data An array of post objects.
	Data []Post `json:"data"`
}

// LoginRequest Data required for user login.
type LoginRequest struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// Password User's password.
	Password string `json:"password"`
}

// LoginResponse Response containing the JWT upon successful login.
type LoginResponse struct {
	// Token JSON Web Token for authenticated sessions.
	Token string `json:"token"`
}

// LoginSuccessResponse Standard wrapper for the successful login response.
type LoginSuccessResponse struct {
	// Data Response containing the JWT upon successful login.
	Data LoginResponse `json:"data"`
}

// Post Represents a post in the system.
type Post struct {
	// Content The text content of the post.
	Content string `json:"content"`

	// CreatedAt Timestamp when the post was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the post.
	Id *int64 `json:"id,omitempty"`

	// UpdatedAt Timestamp when the post was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of the user who created the post.
	UserId *int64 `json:"user_id,omitempty"`
}

// SignupRequest Data required for user signup.
type SignupRequest struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name.
	FirstName string `json:"first_name"`

	// LastName User's last name.
	LastName string `json:"last_name"`

	// Password Desired password.
	Password string `json:"password"`

	// Username Desired username (alphanumeric).
	Username string `json:"username"`
}

// SignupSuccessResponse Standard wrapper for the successful signup response.
type SignupSuccessResponse struct {
	// Data Represents a user in the system.
	Data User `json:"data"`
}

// UpdateCommentRequest Data required to update an existing comment.
type UpdateCommentRequest struct {
	// Content The updated text content of the comment.
	Content string `json:"content"`
}

// UpdateCommentSuccessResponse Standard wrapper for the successful comment update response.
type UpdateCommentSuccessResponse struct {
	// Data Represents a comment on a post.
	Data Comment `json:"data"`
}

// UpdatePostRequest Data required to update an existing post.
type UpdatePostRequest struct {
	// Content The updated text content of the post.
	Content string `json:"content"`
}

// UpdatePostSuccessResponse Standard wrapper for the successful post update response.
type UpdatePostSuccessResponse struct {
	// Data Represents a post in the system.
	Data Post `json:"data"`
}

// UpdateUserProfileRequest Fields allowed for updating a user profile.
type UpdateUserProfileRequest struct {
	// Email User's email address.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName User's first name.
	FirstName *string `json:"first_name,omitempty"`

	// LastName User's last name.
	LastName *string `json:"last_name,omitempty"`

	// Username Desired username (alphanumeric).
	Username *string `json:"username,omitempty"`
}

// UpdateUserProfileSuccessResponse Standard wrapper for the successful user profile update response.
type UpdateUserProfileSuccessResponse struct {
	// Data Represents a user in the system.
	Data User `json:"data"`
}

// User Represents a user in the system.
type User struct {
	// CreatedAt Timestamp when the user was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email User's email address.
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name.
	FirstName string `json:"first_name"`

	// Id Unique identifier for the user.
	Id *int64 `json:"id,omitempty"`

	// LastLogin Timestamp of the user's last login.
	LastLogin *time.Time `json:"last_login"`

	// LastName User's last name.
	LastName string `json:"last_name"`

	// UpdatedAt Timestamp when the user was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Username User's unique username.
	Username string `json:"username"`
}

// LoginUserV1JSONRequestBody defines body for LoginUserV1 for application/json ContentType.
type LoginUserV1JSONRequestBody = LoginRequest

// SignupUserV1JSONRequestBody defines body for SignupUserV1 for application/json ContentType.
type SignupUserV1JSONRequestBody = SignupRequest

// CreatePostV1JSONRequestBody defines body for CreatePostV1 for application/json ContentType.
type CreatePostV1JSONRequestBody = CreatePostRequest

// UpdatePostV1JSONRequestBody defines body for UpdatePostV1 for application/json ContentType.
type UpdatePostV1JSONRequestBody = UpdatePostRequest

// CreateCommentV1JSONRequestBody defines body for CreateCommentV1 for application/json ContentType.
type CreateCommentV1JSONRequestBody = CreateCommentRequest

// UpdateCommentV1JSONRequestBody defines body for UpdateCommentV1 for application/json ContentType.
type UpdateCommentV1JSONRequestBody = UpdateCommentRequest

// UpdateUserProfileV1JSONRequestBody defines body for UpdateUserProfileV1 for application/json ContentType.
type UpdateUserProfileV1JSONRequestBody = UpdateUserProfileRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginUserV1WithBody request with any body
	LoginUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginUserV1(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogoutUserV1 request
	LogoutUserV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAccessTokenV1 request
	RefreshAccessTokenV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignupUserV1WithBody request with any body
	SignupUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignupUserV1(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommentLikeV1 request
	DeleteCommentLikeV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCommentLikesV1 request
	ListCommentLikesV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCommentLikeV1 request
	CreateCommentLikeV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostsV1 request
	ListPostsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostV1WithBody request with any body
	CreatePostV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePostV1(ctx context.Context, body CreatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostV1 request
	DeletePostV1(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostByIdV1 request
	GetPostByIdV1(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostV1WithBody request with any body
	UpdatePostV1WithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePostV1(ctx context.Context, id int64, body UpdatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCommentsForPostV1 request
	ListCommentsForPostV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCommentV1WithBody request with any body
	CreateCommentV1WithBody(ctx context.Context, postId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCommentV1(ctx context.Context, postId int64, body CreateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommentV1 request
	DeleteCommentV1(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentByIdV1 request
	GetCommentByIdV1(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommentV1WithBody request with any body
	UpdateCommentV1WithBody(ctx context.Context, postId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCommentV1(ctx context.Context, postId int64, id int64, body UpdateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostLikeV1 request
	DeletePostLikeV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostLikesV1 request
	ListPostLikesV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostLikeV1 request
	CreatePostLikeV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileV1 request
	GetUserProfileV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserProfileV1WithBody request with any body
	UpdateUserProfileV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserProfileV1(ctx context.Context, body UpdateUserProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUserV1(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogoutUserV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutUserV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAccessTokenV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAccessTokenV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupUserV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupUserV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupUserV1(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupUserV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommentLikeV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommentLikeV1Request(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCommentLikesV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCommentLikesV1Request(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommentLikeV1(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommentLikeV1Request(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostV1(ctx context.Context, body CreatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostV1(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostByIdV1(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostByIdV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostV1WithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostV1(ctx context.Context, id int64, body UpdatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCommentsForPostV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCommentsForPostV1Request(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommentV1WithBody(ctx context.Context, postId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommentV1RequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommentV1(ctx context.Context, postId int64, body CreateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommentV1Request(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommentV1(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommentV1Request(c.Server, postId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentByIdV1(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentByIdV1Request(c.Server, postId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommentV1WithBody(ctx context.Context, postId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommentV1RequestWithBody(c.Server, postId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommentV1(ctx context.Context, postId int64, id int64, body UpdateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommentV1Request(c.Server, postId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostLikeV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostLikeV1Request(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostLikesV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostLikesV1Request(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostLikeV1(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostLikeV1Request(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfileV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfileV1(ctx context.Context, body UpdateUserProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginUserV1Request calls the generic LoginUserV1 builder with application/json body
func NewLoginUserV1Request(server string, body LoginUserV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginUserV1RequestWithBody(server, "application/json", bodyReader)
}

// NewLoginUserV1RequestWithBody generates requests for LoginUserV1 with any type of body
func NewLoginUserV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutUserV1Request generates requests for LogoutUserV1
func NewLogoutUserV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAccessTokenV1Request generates requests for RefreshAccessTokenV1
func NewRefreshAccessTokenV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSignupUserV1Request calls the generic SignupUserV1 builder with application/json body
func NewSignupUserV1Request(server string, body SignupUserV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignupUserV1RequestWithBody(server, "application/json", bodyReader)
}

// NewSignupUserV1RequestWithBody generates requests for SignupUserV1 with any type of body
func NewSignupUserV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommentLikeV1Request generates requests for DeleteCommentLikeV1
func NewDeleteCommentLikeV1Request(server string, commentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCommentLikesV1Request generates requests for ListCommentLikesV1
func NewListCommentLikesV1Request(server string, commentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCommentLikeV1Request generates requests for CreateCommentLikeV1
func NewCreateCommentLikeV1Request(server string, commentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPostsV1Request generates requests for ListPostsV1
func NewListPostsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostV1Request calls the generic CreatePostV1 builder with application/json body
func NewCreatePostV1Request(server string, body CreatePostV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePostV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePostV1RequestWithBody generates requests for CreatePostV1 with any type of body
func NewCreatePostV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostV1Request generates requests for DeletePostV1
func NewDeletePostV1Request(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostByIdV1Request generates requests for GetPostByIdV1
func NewGetPostByIdV1Request(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostV1Request calls the generic UpdatePostV1 builder with application/json body
func NewUpdatePostV1Request(server string, id int64, body UpdatePostV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePostV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePostV1RequestWithBody generates requests for UpdatePostV1 with any type of body
func NewUpdatePostV1RequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCommentsForPostV1Request generates requests for ListCommentsForPostV1
func NewListCommentsForPostV1Request(server string, postId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCommentV1Request calls the generic CreateCommentV1 builder with application/json body
func NewCreateCommentV1Request(server string, postId int64, body CreateCommentV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCommentV1RequestWithBody(server, postId, "application/json", bodyReader)
}

// NewCreateCommentV1RequestWithBody generates requests for CreateCommentV1 with any type of body
func NewCreateCommentV1RequestWithBody(server string, postId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommentV1Request generates requests for DeleteCommentV1
func NewDeleteCommentV1Request(server string, postId int64, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentByIdV1Request generates requests for GetCommentByIdV1
func NewGetCommentByIdV1Request(server string, postId int64, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCommentV1Request calls the generic UpdateCommentV1 builder with application/json body
func NewUpdateCommentV1Request(server string, postId int64, id int64, body UpdateCommentV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommentV1RequestWithBody(server, postId, id, "application/json", bodyReader)
}

// NewUpdateCommentV1RequestWithBody generates requests for UpdateCommentV1 with any type of body
func NewUpdateCommentV1RequestWithBody(server string, postId int64, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostLikeV1Request generates requests for DeletePostLikeV1
func NewDeletePostLikeV1Request(server string, postId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPostLikesV1Request generates requests for ListPostLikesV1
func NewListPostLikesV1Request(server string, postId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostLikeV1Request generates requests for CreatePostLikeV1
func NewCreatePostLikeV1Request(server string, postId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/likes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileV1Request generates requests for GetUserProfileV1
func NewGetUserProfileV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserProfileV1Request calls the generic UpdateUserProfileV1 builder with application/json body
func NewUpdateUserProfileV1Request(server string, body UpdateUserProfileV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserProfileV1RequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserProfileV1RequestWithBody generates requests for UpdateUserProfileV1 with any type of body
func NewUpdateUserProfileV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginUserV1WithBodyWithResponse request with any body
	LoginUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error)

	LoginUserV1WithResponse(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error)

	// LogoutUserV1WithResponse request
	LogoutUserV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserV1Response, error)

	// RefreshAccessTokenV1WithResponse request
	RefreshAccessTokenV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshAccessTokenV1Response, error)

	// SignupUserV1WithBodyWithResponse request with any body
	SignupUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error)

	SignupUserV1WithResponse(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error)

	// DeleteCommentLikeV1WithResponse request
	DeleteCommentLikeV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*DeleteCommentLikeV1Response, error)

	// ListCommentLikesV1WithResponse request
	ListCommentLikesV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*ListCommentLikesV1Response, error)

	// CreateCommentLikeV1WithResponse request
	CreateCommentLikeV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*CreateCommentLikeV1Response, error)

	// ListPostsV1WithResponse request
	ListPostsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPostsV1Response, error)

	// CreatePostV1WithBodyWithResponse request with any body
	CreatePostV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostV1Response, error)

	CreatePostV1WithResponse(ctx context.Context, body CreatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostV1Response, error)

	// DeletePostV1WithResponse request
	DeletePostV1WithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeletePostV1Response, error)

	// GetPostByIdV1WithResponse request
	GetPostByIdV1WithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostByIdV1Response, error)

	// UpdatePostV1WithBodyWithResponse request with any body
	UpdatePostV1WithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostV1Response, error)

	UpdatePostV1WithResponse(ctx context.Context, id int64, body UpdatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostV1Response, error)

	// ListCommentsForPostV1WithResponse request
	ListCommentsForPostV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*ListCommentsForPostV1Response, error)

	// CreateCommentV1WithBodyWithResponse request with any body
	CreateCommentV1WithBodyWithResponse(ctx context.Context, postId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommentV1Response, error)

	CreateCommentV1WithResponse(ctx context.Context, postId int64, body CreateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommentV1Response, error)

	// DeleteCommentV1WithResponse request
	DeleteCommentV1WithResponse(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*DeleteCommentV1Response, error)

	// GetCommentByIdV1WithResponse request
	GetCommentByIdV1WithResponse(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*GetCommentByIdV1Response, error)

	// UpdateCommentV1WithBodyWithResponse request with any body
	UpdateCommentV1WithBodyWithResponse(ctx context.Context, postId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommentV1Response, error)

	UpdateCommentV1WithResponse(ctx context.Context, postId int64, id int64, body UpdateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommentV1Response, error)

	// DeletePostLikeV1WithResponse request
	DeletePostLikeV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*DeletePostLikeV1Response, error)

	// ListPostLikesV1WithResponse request
	ListPostLikesV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*ListPostLikesV1Response, error)

	// CreatePostLikeV1WithResponse request
	CreatePostLikeV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*CreatePostLikeV1Response, error)

	// GetUserProfileV1WithResponse request
	GetUserProfileV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileV1Response, error)

	// UpdateUserProfileV1WithBodyWithResponse request with any body
	UpdateUserProfileV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileV1Response, error)

	UpdateUserProfileV1WithResponse(ctx context.Context, body UpdateUserProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileV1Response, error)
}

type LoginUserV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r LoginUserV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutUserV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r LogoutUserV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutUserV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAccessTokenV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r RefreshAccessTokenV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAccessTokenV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignupUserV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SignupSuccessResponse
	JSON400      *ApiErrorResponse
	JSON409      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r SignupUserV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignupUserV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommentLikeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCommentLikeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommentLikeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCommentLikesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLikesSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListCommentLikesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCommentLikesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCommentLikeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateLikeSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON409      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCommentLikeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCommentLikeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPostsSuccessResponse
	JSON401      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPostsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreatePostSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePostV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ApiErrorResponse
	JSON403      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePostV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostByIdV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPostSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPostByIdV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostByIdV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePostSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON403      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePostV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCommentsForPostV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCommentsSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListCommentsForPostV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCommentsForPostV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCommentV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCommentSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCommentV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCommentV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommentV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ApiErrorResponse
	JSON403      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCommentV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommentV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentByIdV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCommentSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCommentByIdV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentByIdV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommentV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCommentSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON403      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCommentV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommentV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostLikeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePostLikeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostLikeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostLikesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLikesSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPostLikesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostLikesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostLikeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateLikeSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON409      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePostLikeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostLikeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserProfileSuccessResponse
	JSON401      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateUserProfileSuccessResponse
	JSON400      *ApiErrorResponse
	JSON401      *ApiErrorResponse
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginUserV1WithBodyWithResponse request with arbitrary body returning *LoginUserV1Response
func (c *ClientWithResponses) LoginUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error) {
	rsp, err := c.LoginUserV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserV1Response(rsp)
}

func (c *ClientWithResponses) LoginUserV1WithResponse(ctx context.Context, body LoginUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserV1Response, error) {
	rsp, err := c.LoginUserV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserV1Response(rsp)
}

// LogoutUserV1WithResponse request returning *LogoutUserV1Response
func (c *ClientWithResponses) LogoutUserV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserV1Response, error) {
	rsp, err := c.LogoutUserV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutUserV1Response(rsp)
}

// RefreshAccessTokenV1WithResponse request returning *RefreshAccessTokenV1Response
func (c *ClientWithResponses) RefreshAccessTokenV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshAccessTokenV1Response, error) {
	rsp, err := c.RefreshAccessTokenV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAccessTokenV1Response(rsp)
}

// SignupUserV1WithBodyWithResponse request with arbitrary body returning *SignupUserV1Response
func (c *ClientWithResponses) SignupUserV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error) {
	rsp, err := c.SignupUserV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupUserV1Response(rsp)
}

func (c *ClientWithResponses) SignupUserV1WithResponse(ctx context.Context, body SignupUserV1JSONRequestBody, reqEditors ...RequestEditorFn) (*SignupUserV1Response, error) {
	rsp, err := c.SignupUserV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupUserV1Response(rsp)
}

// DeleteCommentLikeV1WithResponse request returning *DeleteCommentLikeV1Response
func (c *ClientWithResponses) DeleteCommentLikeV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*DeleteCommentLikeV1Response, error) {
	rsp, err := c.DeleteCommentLikeV1(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommentLikeV1Response(rsp)
}

// ListCommentLikesV1WithResponse request returning *ListCommentLikesV1Response
func (c *ClientWithResponses) ListCommentLikesV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*ListCommentLikesV1Response, error) {
	rsp, err := c.ListCommentLikesV1(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCommentLikesV1Response(rsp)
}

// CreateCommentLikeV1WithResponse request returning *CreateCommentLikeV1Response
func (c *ClientWithResponses) CreateCommentLikeV1WithResponse(ctx context.Context, commentId int64, reqEditors ...RequestEditorFn) (*CreateCommentLikeV1Response, error) {
	rsp, err := c.CreateCommentLikeV1(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommentLikeV1Response(rsp)
}

// ListPostsV1WithResponse request returning *ListPostsV1Response
func (c *ClientWithResponses) ListPostsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPostsV1Response, error) {
	rsp, err := c.ListPostsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostsV1Response(rsp)
}

// CreatePostV1WithBodyWithResponse request with arbitrary body returning *CreatePostV1Response
func (c *ClientWithResponses) CreatePostV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostV1Response, error) {
	rsp, err := c.CreatePostV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostV1Response(rsp)
}

func (c *ClientWithResponses) CreatePostV1WithResponse(ctx context.Context, body CreatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostV1Response, error) {
	rsp, err := c.CreatePostV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostV1Response(rsp)
}

// DeletePostV1WithResponse request returning *DeletePostV1Response
func (c *ClientWithResponses) DeletePostV1WithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeletePostV1Response, error) {
	rsp, err := c.DeletePostV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostV1Response(rsp)
}

// GetPostByIdV1WithResponse request returning *GetPostByIdV1Response
func (c *ClientWithResponses) GetPostByIdV1WithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostByIdV1Response, error) {
	rsp, err := c.GetPostByIdV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostByIdV1Response(rsp)
}

// UpdatePostV1WithBodyWithResponse request with arbitrary body returning *UpdatePostV1Response
func (c *ClientWithResponses) UpdatePostV1WithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostV1Response, error) {
	rsp, err := c.UpdatePostV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostV1Response(rsp)
}

func (c *ClientWithResponses) UpdatePostV1WithResponse(ctx context.Context, id int64, body UpdatePostV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostV1Response, error) {
	rsp, err := c.UpdatePostV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostV1Response(rsp)
}

// ListCommentsForPostV1WithResponse request returning *ListCommentsForPostV1Response
func (c *ClientWithResponses) ListCommentsForPostV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*ListCommentsForPostV1Response, error) {
	rsp, err := c.ListCommentsForPostV1(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCommentsForPostV1Response(rsp)
}

// CreateCommentV1WithBodyWithResponse request with arbitrary body returning *CreateCommentV1Response
func (c *ClientWithResponses) CreateCommentV1WithBodyWithResponse(ctx context.Context, postId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommentV1Response, error) {
	rsp, err := c.CreateCommentV1WithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommentV1Response(rsp)
}

func (c *ClientWithResponses) CreateCommentV1WithResponse(ctx context.Context, postId int64, body CreateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommentV1Response, error) {
	rsp, err := c.CreateCommentV1(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommentV1Response(rsp)
}

// DeleteCommentV1WithResponse request returning *DeleteCommentV1Response
func (c *ClientWithResponses) DeleteCommentV1WithResponse(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*DeleteCommentV1Response, error) {
	rsp, err := c.DeleteCommentV1(ctx, postId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommentV1Response(rsp)
}

// GetCommentByIdV1WithResponse request returning *GetCommentByIdV1Response
func (c *ClientWithResponses) GetCommentByIdV1WithResponse(ctx context.Context, postId int64, id int64, reqEditors ...RequestEditorFn) (*GetCommentByIdV1Response, error) {
	rsp, err := c.GetCommentByIdV1(ctx, postId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentByIdV1Response(rsp)
}

// UpdateCommentV1WithBodyWithResponse request with arbitrary body returning *UpdateCommentV1Response
func (c *ClientWithResponses) UpdateCommentV1WithBodyWithResponse(ctx context.Context, postId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommentV1Response, error) {
	rsp, err := c.UpdateCommentV1WithBody(ctx, postId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommentV1Response(rsp)
}

func (c *ClientWithResponses) UpdateCommentV1WithResponse(ctx context.Context, postId int64, id int64, body UpdateCommentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommentV1Response, error) {
	rsp, err := c.UpdateCommentV1(ctx, postId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommentV1Response(rsp)
}

// DeletePostLikeV1WithResponse request returning *DeletePostLikeV1Response
func (c *ClientWithResponses) DeletePostLikeV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*DeletePostLikeV1Response, error) {
	rsp, err := c.DeletePostLikeV1(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostLikeV1Response(rsp)
}

// ListPostLikesV1WithResponse request returning *ListPostLikesV1Response
func (c *ClientWithResponses) ListPostLikesV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*ListPostLikesV1Response, error) {
	rsp, err := c.ListPostLikesV1(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostLikesV1Response(rsp)
}

// CreatePostLikeV1WithResponse request returning *CreatePostLikeV1Response
func (c *ClientWithResponses) CreatePostLikeV1WithResponse(ctx context.Context, postId int64, reqEditors ...RequestEditorFn) (*CreatePostLikeV1Response, error) {
	rsp, err := c.CreatePostLikeV1(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostLikeV1Response(rsp)
}

// GetUserProfileV1WithResponse request returning *GetUserProfileV1Response
func (c *ClientWithResponses) GetUserProfileV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileV1Response, error) {
	rsp, err := c.GetUserProfileV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileV1Response(rsp)
}

// UpdateUserProfileV1WithBodyWithResponse request with arbitrary body returning *UpdateUserProfileV1Response
func (c *ClientWithResponses) UpdateUserProfileV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileV1Response, error) {
	rsp, err := c.UpdateUserProfileV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileV1Response(rsp)
}

func (c *ClientWithResponses) UpdateUserProfileV1WithResponse(ctx context.Context, body UpdateUserProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileV1Response, error) {
	rsp, err := c.UpdateUserProfileV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileV1Response(rsp)
}

// ParseLoginUserV1Response parses an HTTP response from a LoginUserV1WithResponse call
func ParseLoginUserV1Response(rsp *http.Response) (*LoginUserV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLogoutUserV1Response parses an HTTP response from a LogoutUserV1WithResponse call
func ParseLogoutUserV1Response(rsp *http.Response) (*LogoutUserV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutUserV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRefreshAccessTokenV1Response parses an HTTP response from a RefreshAccessTokenV1WithResponse call
func ParseRefreshAccessTokenV1Response(rsp *http.Response) (*RefreshAccessTokenV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAccessTokenV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSignupUserV1Response parses an HTTP response from a SignupUserV1WithResponse call
func ParseSignupUserV1Response(rsp *http.Response) (*SignupUserV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignupUserV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SignupSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCommentLikeV1Response parses an HTTP response from a DeleteCommentLikeV1WithResponse call
func ParseDeleteCommentLikeV1Response(rsp *http.Response) (*DeleteCommentLikeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommentLikeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListCommentLikesV1Response parses an HTTP response from a ListCommentLikesV1WithResponse call
func ParseListCommentLikesV1Response(rsp *http.Response) (*ListCommentLikesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCommentLikesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLikesSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCommentLikeV1Response parses an HTTP response from a CreateCommentLikeV1WithResponse call
func ParseCreateCommentLikeV1Response(rsp *http.Response) (*CreateCommentLikeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCommentLikeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateLikeSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPostsV1Response parses an HTTP response from a ListPostsV1WithResponse call
func ParseListPostsV1Response(rsp *http.Response) (*ListPostsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPostsSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePostV1Response parses an HTTP response from a CreatePostV1WithResponse call
func ParseCreatePostV1Response(rsp *http.Response) (*CreatePostV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreatePostSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePostV1Response parses an HTTP response from a DeletePostV1WithResponse call
func ParseDeletePostV1Response(rsp *http.Response) (*DeletePostV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPostByIdV1Response parses an HTTP response from a GetPostByIdV1WithResponse call
func ParseGetPostByIdV1Response(rsp *http.Response) (*GetPostByIdV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostByIdV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPostSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePostV1Response parses an HTTP response from a UpdatePostV1WithResponse call
func ParseUpdatePostV1Response(rsp *http.Response) (*UpdatePostV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePostSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListCommentsForPostV1Response parses an HTTP response from a ListCommentsForPostV1WithResponse call
func ParseListCommentsForPostV1Response(rsp *http.Response) (*ListCommentsForPostV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCommentsForPostV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCommentsSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCommentV1Response parses an HTTP response from a CreateCommentV1WithResponse call
func ParseCreateCommentV1Response(rsp *http.Response) (*CreateCommentV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCommentV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCommentSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCommentV1Response parses an HTTP response from a DeleteCommentV1WithResponse call
func ParseDeleteCommentV1Response(rsp *http.Response) (*DeleteCommentV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommentV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCommentByIdV1Response parses an HTTP response from a GetCommentByIdV1WithResponse call
func ParseGetCommentByIdV1Response(rsp *http.Response) (*GetCommentByIdV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentByIdV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCommentSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCommentV1Response parses an HTTP response from a UpdateCommentV1WithResponse call
func ParseUpdateCommentV1Response(rsp *http.Response) (*UpdateCommentV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommentV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCommentSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePostLikeV1Response parses an HTTP response from a DeletePostLikeV1WithResponse call
func ParseDeletePostLikeV1Response(rsp *http.Response) (*DeletePostLikeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostLikeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPostLikesV1Response parses an HTTP response from a ListPostLikesV1WithResponse call
func ParseListPostLikesV1Response(rsp *http.Response) (*ListPostLikesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostLikesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLikesSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePostLikeV1Response parses an HTTP response from a CreatePostLikeV1WithResponse call
func ParseCreatePostLikeV1Response(rsp *http.Response) (*CreatePostLikeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostLikeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateLikeSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserProfileV1Response parses an HTTP response from a GetUserProfileV1WithResponse call
func ParseGetUserProfileV1Response(rsp *http.Response) (*GetUserProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserProfileSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserProfileV1Response parses an HTTP response from a UpdateUserProfileV1WithResponse call
func ParseUpdateUserProfileV1Response(rsp *http.Response) (*UpdateUserProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUserProfileSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /v1/auth/login)
	LoginUserV1(ctx echo.Context) error
	// Log out a user
	// (POST /v1/auth/logout)
	LogoutUserV1(ctx echo.Context) error
	// Refresh access token
	// (POST /v1/auth/refresh)
	RefreshAccessTokenV1(ctx echo.Context) error
	// Sign up a new user
	// (POST /v1/auth/signup)
	SignupUserV1(ctx echo.Context) error
	// Unlike a comment
	// (DELETE /v1/comments/{commentId}/likes)
	DeleteCommentLikeV1(ctx echo.Context, commentId int64) error
	// List likes for a comment
	// (GET /v1/comments/{commentId}/likes)
	ListCommentLikesV1(ctx echo.Context, commentId int64) error
	// Like a comment
	// (POST /v1/comments/{commentId}/likes)
	CreateCommentLikeV1(ctx echo.Context, commentId int64) error
	// List posts
	// (GET /v1/posts)
	ListPostsV1(ctx echo.Context) error
	// Create a new post
	// (POST /v1/posts)
	CreatePostV1(ctx echo.Context) error
	// Delete a specific post by ID
	// (DELETE /v1/posts/{id})
	DeletePostV1(ctx echo.Context, id int64) error
	// Get a specific post by ID
	// (GET /v1/posts/{id})
	GetPostByIdV1(ctx echo.Context, id int64) error
	// Update a specific post by ID
	// (PUT /v1/posts/{id})
	UpdatePostV1(ctx echo.Context, id int64) error
	// List comments for a post
	// (GET /v1/posts/{postId}/comments)
	ListCommentsForPostV1(ctx echo.Context, postId int64) error
	// Create a new comment on a post
	// (POST /v1/posts/{postId}/comments)
	CreateCommentV1(ctx echo.Context, postId int64) error
	// Delete a specific comment by ID
	// (DELETE /v1/posts/{postId}/comments/{id})
	DeleteCommentV1(ctx echo.Context, postId int64, id int64) error
	// Get a specific comment by ID
	// (GET /v1/posts/{postId}/comments/{id})
	GetCommentByIdV1(ctx echo.Context, postId int64, id int64) error
	// Update a specific comment by ID
	// (PUT /v1/posts/{postId}/comments/{id})
	UpdateCommentV1(ctx echo.Context, postId int64, id int64) error
	// Unlike a post
	// (DELETE /v1/posts/{postId}/likes)
	DeletePostLikeV1(ctx echo.Context, postId int64) error
	// List likes for a post
	// (GET /v1/posts/{postId}/likes)
	ListPostLikesV1(ctx echo.Context, postId int64) error
	// Like a post
	// (POST /v1/posts/{postId}/likes)
	CreatePostLikeV1(ctx echo.Context, postId int64) error
	// Get current user profile
	// (GET /v1/users)
	GetUserProfileV1(ctx echo.Context) error
	// Update current user profile
	// (PUT /v1/users)
	UpdateUserProfileV1(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUserV1 converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUserV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUserV1(ctx)
	return err
}

// LogoutUserV1 converts echo context to params.
func (w *ServerInterfaceWrapper) LogoutUserV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogoutUserV1(ctx)
	return err
}

// RefreshAccessTokenV1 converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshAccessTokenV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshAccessTokenV1(ctx)
	return err
}

// SignupUserV1 converts echo context to params.
func (w *ServerInterfaceWrapper) SignupUserV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupUserV1(ctx)
	return err
}

// DeleteCommentLikeV1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommentLikeV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commentId" -------------
	var commentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCommentLikeV1(ctx, commentId)
	return err
}

// ListCommentLikesV1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommentLikesV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commentId" -------------
	var commentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCommentLikesV1(ctx, commentId)
	return err
}

// CreateCommentLikeV1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCommentLikeV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commentId" -------------
	var commentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCommentLikeV1(ctx, commentId)
	return err
}

// ListPostsV1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostsV1(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPostsV1(ctx)
	return err
}

// CreatePostV1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostV1(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePostV1(ctx)
	return err
}

// DeletePostV1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePostV1(ctx, id)
	return err
}

// GetPostByIdV1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostByIdV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostByIdV1(ctx, id)
	return err
}

// UpdatePostV1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePostV1(ctx, id)
	return err
}

// ListCommentsForPostV1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommentsForPostV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCommentsForPostV1(ctx, postId)
	return err
}

// CreateCommentV1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCommentV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCommentV1(ctx, postId)
	return err
}

// DeleteCommentV1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommentV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCommentV1(ctx, postId, id)
	return err
}

// GetCommentByIdV1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommentByIdV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCommentByIdV1(ctx, postId, id)
	return err
}

// UpdateCommentV1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCommentV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCommentV1(ctx, postId, id)
	return err
}

// DeletePostLikeV1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostLikeV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePostLikeV1(ctx, postId)
	return err
}

// ListPostLikesV1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostLikesV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPostLikesV1(ctx, postId)
	return err
}

// CreatePostLikeV1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostLikeV1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int64

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePostLikeV1(ctx, postId)
	return err
}

// GetUserProfileV1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserProfileV1(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserProfileV1(ctx)
	return err
}

// UpdateUserProfileV1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserProfileV1(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserProfileV1(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/auth/login", wrapper.LoginUserV1)
	router.POST(baseURL+"/v1/auth/logout", wrapper.LogoutUserV1)
	router.POST(baseURL+"/v1/auth/refresh", wrapper.RefreshAccessTokenV1)
	router.POST(baseURL+"/v1/auth/signup", wrapper.SignupUserV1)
	router.DELETE(baseURL+"/v1/comments/:commentId/likes", wrapper.DeleteCommentLikeV1)
	router.GET(baseURL+"/v1/comments/:commentId/likes", wrapper.ListCommentLikesV1)
	router.POST(baseURL+"/v1/comments/:commentId/likes", wrapper.CreateCommentLikeV1)
	router.GET(baseURL+"/v1/posts", wrapper.ListPostsV1)
	router.POST(baseURL+"/v1/posts", wrapper.CreatePostV1)
	router.DELETE(baseURL+"/v1/posts/:id", wrapper.DeletePostV1)
	router.GET(baseURL+"/v1/posts/:id", wrapper.GetPostByIdV1)
	router.PUT(baseURL+"/v1/posts/:id", wrapper.UpdatePostV1)
	router.GET(baseURL+"/v1/posts/:postId/comments", wrapper.ListCommentsForPostV1)
	router.POST(baseURL+"/v1/posts/:postId/comments", wrapper.CreateCommentV1)
	router.DELETE(baseURL+"/v1/posts/:postId/comments/:id", wrapper.DeleteCommentV1)
	router.GET(baseURL+"/v1/posts/:postId/comments/:id", wrapper.GetCommentByIdV1)
	router.PUT(baseURL+"/v1/posts/:postId/comments/:id", wrapper.UpdateCommentV1)
	router.DELETE(baseURL+"/v1/posts/:postId/likes", wrapper.DeletePostLikeV1)
	router.GET(baseURL+"/v1/posts/:postId/likes", wrapper.ListPostLikesV1)
	router.POST(baseURL+"/v1/posts/:postId/likes", wrapper.CreatePostLikeV1)
	router.GET(baseURL+"/v1/users", wrapper.GetUserProfileV1)
	router.PUT(baseURL+"/v1/users", wrapper.UpdateUserProfileV1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde1MbObb/Krp9p+omdY2xA8lu/NcwIaHMhMDwSHYnxaZE97Et6JZ6JDXGSfHdtyT1",
	"+2F3m7YhjP8C7G7p6LzPT0fih2Uzz2cUqBTW4Icl7Al4WP+655P3nDOufvc584FLAvobmzmgfjogbE58",
	"SRi1BtYeRdj3XWJj9cGW8MEmI2IjUIMg9U7X6lhwhz3fBWtgfd77ONzfOx8ef/r2/vT0+NTqWHLmq2+E",
	"5ISOrfuONSLgOsWpzieA4vEJ9QOJ9JOIg4slOEgyJCcQTv2C6few+zJLAHiYuGWzeiAEHpctEU0CD9Mt",
	"DtjBVy6g1NeIjZI5sxO9VxOhEeMelogIROgtdonTLc5937E4/BUQDo41+GoYndBzGT/Prq7BlorWSEqn",
	"IHxGBRSlpQkS5fLiHM+QzajEhBI6RowCYhx5jEfMMzMJRSuR4OlxfuEwsgbW/24nurMdKs52rDX3MbF6",
	"lsLaQrLK1vSOeR5QWST5FHwOQs2HMLLNU4hRhJHPhFQ05hWVytKBlAJJuJMofCISXjhmVnwHHLDUM/xP",
	"mbbY6mtwvuGyeYgHQmLPR9MJ0PQUaIoFCl9V0xntsAaWgyVsSeIpwSs9O6buzBpIHkDJ3KTEOC4o+SsA",
	"RBygkowIcKV5+dXF0xEq3+xWT0WohDFoaSoGfCubcLgfsU89guSEiHiVV+AyOhZIsiVnDXxnWe66WEgU",
	"vr88iwMBfMGy1SNoOmGRPB/M7JypEMdK2J9Q1In1O6OEGZ6Vmpd+NjSyU/grAFHC3H0sMYqoUA7VTIEw",
	"ojBdn/ENER5zAGV5Hr77CHQsJ9bgda/XsTxCo7/7iz2pIWYhP84C2wYh0u40S/2ZxNTB3EFTjn0/ZV3C",
	"vDkK3Jg7mmUqNvBwuCKXHCzxIp8a+cP8ovS71Sv6SG6gleW45AbaWosiqulCTphYVk9bUs1omEQvDwMh",
	"kQApVdgMfOTN0AHbOmM2wS7Cts0CKnNK2++1r7WKNa3IWLvulmSsiKov4wOQq7A9DpITuMXuuo3vAGS7",
	"UmlrJY3FciGAn3A2Im47fkTHSd8M2NqqFJH1V6Xdz/y8UlH5f8I4vTi8IV3CmPiEjlWWPEJhRE59pf4S",
	"Exa4DrpSTsMP3Cj5yDug6Pl5eUWSRCknowhy0AsvkAF23RmCO9sNBLkFNCVyElGTrXF2ev2S9IMGrqvK",
	"l+qsq2FOq3mVS2gTV/mq92p3q7ez1e+d93uDnd6g1/tzTRmvIixDTL9XypH2st9askrEnxXXqyXF1SRH",
	"NaQZ9dLRJceffkv5aipLTZSp3CRFFABEqxHAJQ2dZ0V9zEZJutuwGo6Dx4JieI6/ElL5rCU5o1gQ6aOo",
	"XnittZjM7SELUQFItBcXW5SvcfENhWvi6dIMYWNCa2a1igPagF31UnGBBskq+kUTyfS3CDsOByGyrvka",
	"U+g6DH4NP+razEu75ggiy5RemRx2p8RH+1iIKeNOJUXRA1lixI7Nd6T/qxDTHnfSZMQDzqPkn4uy6Wgx",
	"8WhzxFKlnNE3adBM6ebhl3MU+IxmyqZyYUl2A7Q48uHZ8Sf0Ba7QufpeixwHcqJCmq1BBQFCEEZzEoTZ",
	"4eTqwCbH5HB48X3Y/0SGYkhPX9vvhm+GN/6/Pr87fNuF2eF358uQHJPh3dH1Ue/T+b93jvdvpkMyJVfe",
	"B/nnmX74Fh/sjk8P3rrqc/zlQ294ze4+nb9/dXR99Ppofzgb/dE9G7m/301PD8+O4PffP7z643x3NPWP",
	"4HC08+bk+ObN7PDzN+z8IcT0tZ2W4PVULkQ7DWMqhdJOKatGemgJm1GR2gav3cX81FO7IWJyKjETEryV",
	"1K7nEyIQEapmHREu2sM2Nf2PAGxGS1w9vhiv8HHBxaUXvCBTWwpPPCNjGvhNQ5nQbz35WKYN5BvFHlTS",
	"ZGxIPZKDiDCFxvMpvZo/nda84mz7DFoM1PsgtLjWFKmNEpYvOyIlegK9wK4/wTTwgBP7ZVEJnMWc8LGU",
	"wNXo//mKt77vbf3Z23p7+f+/LIxRKXVIyypFf6denmGMppWYZixprTDKhfYIjbcQjCNBmCK4CyuTFOjf",
	"IM6FHqnJNoKQnNGxO1v9fkKGOa1WtCH/1gxomvU0A+FLJL0EFD9PzMW05iJ8upDWrAyDTzjTXlXbioyb",
	"Qb1mGSm0t1LOHwi4jkDYddk0CubqZSVfnMF3N4H9MQP7E46mi7Wv/b2GVmyqYYRUTy/eaFhY7TUrwEyx",
	"MB+I72/1X7cAxC9vzmxC65hzqxbLJtR6cJmpuNsCWh76Ag1FzJNqqgCMvEMMKZUI9R/nvbeD3lyh5ncS",
	"Fgr5gU6r6JeaVduxOuer7ZLlvznvvxrsvn6QTle7zXC1gdGN6LmiYjtl6y4rupsUEvWL8fuOJcAOOJGz",
	"M+W2jBO5AsyB7wXKXUd/fYgYdPjl3OqYvk81kvk2WcNESt+6VwMTOmIlKPrJMG7FNL0DkbUcMBS1QyRt",
	"obrnkUjTVxc/sHcytDrWLXBhBu13e92eEgjzgWKfWANrp9vr7uiiSk70orZv+9s4kJPt2I78UoBtLwWi",
	"xl4XUwdxkAGn6qPDL+eKLuV3NZFDxxoYzFGJ/XPfMvIDIX9jziyXtaYWt30tGE26aGviiCbV0iwu6lwI",
	"WNoctDvCrrDSyqT0WGuXCWyaMa96vXZJzMfjElL1c6nw20Wnae4iDe12lUR3W6Su0PtaQtnQ9NqGXcIq",
	"XKMX0B13O0h/blTW9KK+DAnsPwqBJmIynoJc7jvW6zWz6wz4LfCw99cJuN48NEFHO5fA8zCfGYmr3MXY",
	"kzJqPBbKuaXMTXH2c9+6VC+mrZUFstpc37mAuUhvfahhbMZuiNnBLFgpC2TKTIuGUNBUFsiMqn5icW1p",
	"fAI8Kd6zQJYxX62iMfc5jDiISTX7LwQI7b3DJ43lohcjzrxQCi9VfU+ECKIeO6xZGT1JImm9LErr1Ay6",
	"p1/Q+1w1pbaXniIkDZyUFN1ZqRyVil4xR30ZE/rNjGKIRALko5o948gjQihZZ1j+ZDQww/O8IoYCzahA",
	"A3U0yOUcZ6ATHxHqmYncprWyqFsGUF1pwM5udFRF7BCOdUBiUitc91smsEa8NoSmrAdxGBMhgYOTxG6N",
	"poa7Tpr5Js38WeL427USeBEBKoxH1a+rCo6ZQUDFkzFoI2kepuNZe1YKhAI/ZXD1rDkEqMX2j/C3oXO/",
	"rZuOjFG7IEubKTx2G8abbK9DugdThx6cnPdK4ftZD7Cvpwnh7Y/kBsqCy26Jl4nQdWp64xZGlUcJGDnu",
	"x2A749F5skyWvbtW4iIWUibRiAVUk6Wll3ySRVEe3RiUskStcd1M5WwNvmZr5q+X95dpK7nQipIcQUvZ",
	"iO7VM6bRscZQ2vChG9Z0VNMdbGxk2vNMy08NPU81TOrpKnOodkrAqg7EMh3NrShszsvb1MZ8FpnP49tH",
	"KLpU82gjE1Fak1HrBabiY449kMCFHrq4FVjoitdtmlS3HMiJ1bEMbmfF8aeQeHVSrCpgtoU+mctOrZw0",
	"OSWQt9vY3xUjW9GkM0fQqkJXewZTfT5sjnKWBceyTNGwJJ0pbix9gaWvO1eNqIgyVCPaq1kCujOOmJwA",
	"V7nPyCWhKB/VI5nDactF7I814nWYyiqr1wZXO3rrNzrIZ9JAtO4sPJGDx4TGqHcxhut2+NUH79Ku+7nB",
	"Wy/opw3eTyVsai4uEzaNBiY6qgUYB8oaQUn3kTQPP2qelWEnxZO8Jaw80YdQk2NJ60NOqk/TVpIZhrvF",
	"ATF1uGSzBfJzm3ccg0z3WSPbfpc/l15u4ukwtP2DOPfzEBQDeYh0+mm0bUqTgF7HA5iBUh5gEWiibcCQ",
	"9UwQk521w4WICJ0IKgExTr6b1knDVHONSqhm689TtXh1FiOTu5bAUWXYEypSYxBnCXM0Gl+wnKsZGu5X",
	"Bd8FKWEI+asUKjds0eDCWwJ+mw2d1aaAFdcRVMl8A9k8JwPJpaMNTeQAZDP7aIDimKuiGDJWAcgUSSWA",
	"DmkDyQnKtrp1I5VIH4UvsdzmoTRpCl9ZMl3syC+LMGE7vN8wqe6tgMy63idq+K9OqoP0qjZJ9bPLfsJW",
	"7U32s9i5xycvlnDtF+H5nPrePVuXqB9D5z7e+G0EmEUv5Xe8yjOl9P0gHxivqlHaBc2qLiSZi5vF69ok",
	"Uc80iYokvAysl9P6HAIQKdwDUqlI67IzqckcJ3VfqrmKsyTTMja9nn2zzP2RWR+09L7ZirHL3GnXOdsq",
	"j4hgVpw6nUdsbRwzewnSJuvauNvVYqzxRv/yMGvhmtpKjzs/vVkGiI3nXg6LzTq1uj1sG0R2xYhsopSP",
	"ZL+Mo0jYPw8+u5wpFyHa+EbMXJ2Sz56WAmorG+6SG2rXAtc2j+GbeuOZGlCx9HgYhFvXfhpXH5nbatNX",
	"/q+qzujUahJ86gjz0jlC5o6ZFePMiwufCGq2mxdAvdUQ28B51secNwXQ3wJ23qR4y4DQy8WnIg5dL0SV",
	"l2srOnFUjksnLTMNzhqZXa7NQaMH2cff7JRRDrdo8YhR9YZLpNabw0XPzGSe38mieebRsI55AhsjJQeK",
	"HtDO/cSOEp0wsTlHtCqjXvchIk3C3+0EUbWzCTNStfY63RDa5YTXExJq3Ef69iw74ByodGe1LD77z5pW",
	"jlDOuayxqurK/dunTdSuU6omae2L8N9KqU/kzCe2PmY2wb4PFJFRVklePq3G0+hC2MbAZWgDmbs8U8an",
	"WJRE+kUAXHvGVriwdMX4W8nFvIusbGTu6Y2BjcdA4h7gJOpDcj/htTSbs1WL2hmXchghklTfZ5jRFQFl",
	"xcE+3ILLfA1FmaesjhVw1xpY29gnlpo8HDT/6nHkLUT6/5Gb26uy0njx2Vx5ifovk2qjeM1OcbOjegpR",
	"Pmi87rpjmTPApWPFTaF1x4r70UqHSwN7dUc09R+jIZmYOgsmiRO1+8v7/wYAAP//YE4bbvR+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
