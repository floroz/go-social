/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign up a new user
         * @description Creates a new user account.
         */
        post: operations["signupUserV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in a user
         * @description Authenticates a user and returns a JWT.
         */
        post: operations["loginUserV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * @description A human-readable error message.
             * @example Invalid credentials provided.
             */
            error: string;
            /**
             * @description Optional additional details or validation errors.
             * @example {
             *       "email": "Invalid email format"
             *     }
             */
            details?: {
                [key: string]: unknown;
            };
        };
        /** @description Represents a user in the system. */
        User: {
            /**
             * Format: int64
             * @description Unique identifier for the user.
             * @example 101
             */
            readonly id: number;
            /**
             * @description User's first name.
             * @example John
             */
            first_name: string;
            /**
             * @description User's last name.
             * @example Doe
             */
            last_name: string;
            /**
             * @description User's unique username.
             * @example johndoe
             */
            username: string;
            /**
             * Format: email
             * @description User's email address.
             * @example john.doe@example.com
             */
            email: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was created.
             * @example 2024-01-15T10:30:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was last updated.
             * @example 2024-01-16T12:45:00Z
             */
            readonly updated_at: string;
            /**
             * Format: date-time
             * @description Timestamp of the user's last login.
             * @example 2024-01-17T09:00:00Z
             */
            readonly last_login?: string | null;
        };
        /** @description Data required for user signup. */
        SignupRequest: {
            /**
             * @description User's first name.
             * @example Jane
             */
            first_name: string;
            /**
             * @description User's last name.
             * @example Doe
             */
            last_name: string;
            /**
             * @description Desired username (alphanumeric).
             * @example janedoe
             */
            username: string;
            /**
             * Format: email
             * @description User's email address.
             * @example jane.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @description Desired password.
             * @example s3cr3tp@ssw0rd
             */
            password: string;
        };
        /** @description Data required for user login. */
        LoginRequest: {
            /**
             * Format: email
             * @description User's email address.
             * @example jane.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password.
             * @example s3cr3tp@ssw0rd
             */
            password: string;
        };
        /** @description Response containing the JWT upon successful login. */
        LoginResponse: {
            /**
             * Format: jwt
             * @description JSON Web Token for authenticated sessions.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
             */
            token: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signupUserV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User signup details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description User successfully registered. Returns the created user object. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Invalid input data (e.g., validation errors). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Username or email already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error during registration. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    loginUserV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User login credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful. Returns a JWT token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid input data (e.g., validation errors). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid email or password. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error during login. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
